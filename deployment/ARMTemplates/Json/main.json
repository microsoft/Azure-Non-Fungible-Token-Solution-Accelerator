{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1124.51302",
      "templateHash": "3324544864205303332"
    }
  },
  "parameters": {
    "adminUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Admin User Name for Virtual Machine"
      }
    },
    "adminPwd": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character that is not \"#\", \"`\", \"*\", \"'\", \"'\", \"-\", \"%\",' ' or \";\"."
      }
    }
  },
  "variables": {
    "resourceprefix": "[format('{0}', take(uniqueString(deployment().name), 5))]",
    "virtualMachineName": "[format('vmnftsa{0}', variables('resourceprefix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-10-01",
      "name": "[format('blockchain-{0}', variables('resourceprefix'))]",
      "location": "[deployment().location]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-10-01",
      "name": "[format('nftservice-{0}', variables('resourceprefix'))]",
      "location": "[deployment().location]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pip-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('blockchain-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8151381411904389297"
            }
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string"
            },
            "publicIPAddresseName": {
              "type": "string",
              "defaultValue": "[format('{0}-pip', parameters('virtualMachineName'))]",
              "metadata": {
                "description": "Provide a name for public ip adddress."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Provide a location for public Ip Address"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-11-01",
              "name": "[parameters('publicIPAddresseName')]",
              "location": "[parameters('location')]",
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic",
                "idleTimeoutInMinutes": 4,
                "dnsSettings": {
                  "domainNameLabel": "[parameters('virtualMachineName')]"
                }
              }
            }
          ],
          "outputs": {
            "createdPipAddressId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))]"
            },
            "createdFqdnUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn]"
            },
            "Web_block_explorer_address": {
              "type": "string",
              "value": "[format('http://{0}:25000/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn)]"
            },
            "Prometheus_address": {
              "type": "string",
              "value": "[format('http://{0}:9090/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn)]"
            },
            "Grafana_address": {
              "type": "string",
              "value": "[format('http://{0}:3000/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn)]"
            },
            "Kibana_address": {
              "type": "string",
              "value": "[format('http://{0}:5601/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn)]"
            },
            "Cakeshop_address": {
              "type": "string",
              "value": "[format('http://{0}:8999/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn)]"
            },
            "JSON_RPC_HTTP_Service_Endpoint": {
              "type": "string",
              "value": "[format('http://{0}:8545/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn)]"
            },
            "JSON_RPC_WebSocket_service_endpoint": {
              "type": "string",
              "value": "[format('http://{0}:8546/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn)]"
            },
            "GraphQL_HTTP_service_endpoint": {
              "type": "string",
              "value": "[format('http://{0}:8547/', reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresseName'))).dnsSettings.fqdn)]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('blockchain-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('vnet-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('blockchain-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1990934773210863260"
            }
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string",
              "defaultValue": "[format('{0}-vnet', parameters('virtualMachineName'))]",
              "metadata": {
                "description": "Provide a name for Virtual Network."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Provide a location for Virtual Network"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.1.0.0/20"
                  ]
                },
                "subnets": [
                  {
                    "name": "nftdevtestsubnet",
                    "properties": {
                      "addressPrefix": "10.1.0.0/20",
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    }
                  }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'nftdevtestsubnet')]",
              "properties": {
                "addressPrefix": "10.1.0.0/20",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            }
          ],
          "outputs": {
            "createdVnetSubnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'nftdevtestsubnet')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('blockchain-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('vm-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('blockchain-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminUserName": {
            "value": "[parameters('adminUserName')]"
          },
          "adminPwd": {
            "value": "[parameters('adminPwd')]"
          },
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          },
          "pipAddressId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('blockchain-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('pip-{0}', variables('resourceprefix'))), '2020-10-01').outputs.createdPipAddressId.value]"
          },
          "vnetSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('blockchain-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('vnet-{0}', variables('resourceprefix'))), '2020-10-01').outputs.createdVnetSubnetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1820631051484589484"
            }
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Provide a globally unique name of your VirtualMachine"
              }
            },
            "networkInterfaceName": {
              "type": "string",
              "defaultValue": "[format('{0}-nic', parameters('virtualMachineName'))]",
              "metadata": {
                "description": "Provide a name for Network Interface."
              }
            },
            "networkSecurityGroupName": {
              "type": "string",
              "defaultValue": "[format('{0}-nsg', parameters('virtualMachineName'))]",
              "metadata": {
                "description": "Provide a name for network security group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Provide a location for Virtual Machine."
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_B2ms",
              "metadata": {
                "description": "Provide Virtual Machine Size"
              }
            },
            "adminUserName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Admin User Name for Virtual Machine"
              }
            },
            "adminPwd": {
              "type": "secureString",
              "defaultValue": ""
            },
            "diskId": {
              "type": "string",
              "defaultValue": "[newGuid()]"
            },
            "pipAddressId": {
              "type": "string"
            },
            "vnetSubnetId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[parameters('networkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "tags": {
                "displayName": "Network Security Group"
              },
              "properties": {
                "securityRules": [
                  {
                    "name": "allow-http",
                    "properties": {
                      "description": "Allow http",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "80",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 300,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "allow-eth-ports",
                    "properties": {
                      "description": "Allow standard ethereum ports",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 301,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [
                        "8545",
                        "8546",
                        "8547",
                        "18545"
                      ],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "allow-monitoring-ports",
                    "properties": {
                      "description": "Allow monitoring tools",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 302,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [
                        "8999",
                        "5601",
                        "3000",
                        "9090",
                        "25000"
                      ],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "allow-privacy",
                    "properties": {
                      "description": "Allow Graphql",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 303,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [
                        "9081",
                        "9082",
                        "9083"
                      ],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "allow-privacy-examples",
                    "properties": {
                      "description": "Allow privacy example ports",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 304,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [
                        "20000",
                        "20001",
                        "20002",
                        "20003",
                        "20004",
                        "20005",
                        "20006"
                      ],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "allow-ssh",
                    "properties": {
                      "description": "Allow SSH",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "22",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 320,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Port_22",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "22",
                      "sourceAddressPrefix": "76.104.244.241",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 319,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-07-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "Canonical",
                    "offer": "UbuntuServer",
                    "sku": "18.04-LTS",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Linux",
                    "name": "[format('{0}_OsDisk_{1}', parameters('virtualMachineName'), parameters('diskId'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Standard_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 30
                  },
                  "dataDisks": [
                    {
                      "lun": 0,
                      "name": "[format('{0}-datadisk1', parameters('virtualMachineName'))]",
                      "createOption": "Attach",
                      "caching": "None",
                      "writeAcceleratorEnabled": false,
                      "managedDisk": {
                        "storageAccountType": "StandardSSD_LRS",
                        "id": "[resourceId('Microsoft.Compute/disks', format('{0}-datadisk1', parameters('virtualMachineName')))]"
                      },
                      "deleteOption": "Detach",
                      "diskSizeGB": 4096,
                      "toBeDetached": false
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUserName')]",
                  "adminPassword": "[parameters('adminPwd')]",
                  "linuxConfiguration": {
                    "disablePasswordAuthentication": false,
                    "provisionVMAgent": true,
                    "patchSettings": {
                      "patchMode": "ImageDefault",
                      "assessmentMode": "ImageDefault"
                    }
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]",
                "[resourceId('Microsoft.Compute/disks', format('{0}-datadisk1', parameters('virtualMachineName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/disks",
              "apiVersion": "2018-06-01",
              "name": "[format('{0}-datadisk1', parameters('virtualMachineName'))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "creationData": {
                  "createOption": "Empty"
                },
                "diskSizeGB": 4096
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureNetworkWatcherExtension')]",
              "location": "[parameters('location')]",
              "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentLinux",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'newuserscript')]",
              "location": "[parameters('location')]",
              "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "settings": {
                  "fileUris": [
                    "https://catalogartifact.azureedge.net/publicartifacts/consensys.quorum-dev-quickstart-18d23e17-73e6-480d-b804-9997205d2651-quorum-dev-quickstart/Artifacts/scripts/qdq-setup.sh"
                  ]
                },
                "protectedSettings": {
                  "commandToExecute": "[format('/bin/bash qdq-setup.sh {0}', parameters('adminUserName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), 'allow-eth-ports')]",
              "properties": {
                "description": "Allow standard ethereum ports",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 301,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [
                  "8545",
                  "8546",
                  "8547",
                  "18545"
                ],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), 'allow-http')]",
              "properties": {
                "description": "Allow http",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "80",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 300,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), 'allow-monitoring-ports')]",
              "properties": {
                "description": "Allow monitoring tools",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 302,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [
                  "8999",
                  "5601",
                  "3000",
                  "9090",
                  "25000"
                ],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), 'allow-privacy')]",
              "properties": {
                "description": "Allow Graphql",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 303,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [
                  "9081",
                  "9082",
                  "9083"
                ],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), 'allow-privacy-examples')]",
              "properties": {
                "description": "Allow privacy example ports",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 304,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [
                  "20000",
                  "20001",
                  "20002",
                  "20003",
                  "20004",
                  "20005",
                  "20006"
                ],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), 'allow-ssh')]",
              "properties": {
                "description": "Allow SSH",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 320,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), 'Port_22')]",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "76.104.244.241",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 319,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-11-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAddress": "10.1.0.4",
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[parameters('pipAddressId')]"
                      },
                      "subnet": {
                        "id": "[parameters('vnetSubnetId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('blockchain-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('pip-{0}', variables('resourceprefix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('blockchain-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('vnet-{0}', variables('resourceprefix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('blockchain-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pid-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('blockchain-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "2239049205019932014"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "pid-ea77555d-5efd-5b4b-ba1f-1d54583008ea",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              },
              "metadata": {
                "description": "create resource with NFT Trace ID"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('blockchain-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('acr-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('nftservice-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "11037489799380847314"
            }
          },
          "parameters": {
            "acrName": {
              "type": "string",
              "defaultValue": "[format('acrnftsa{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Provide a globally unique name of your Azure Container Registry"
              },
              "maxLength": 50,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Provide a location for the registry."
              }
            },
            "acrSku": {
              "type": "string",
              "defaultValue": "Basic",
              "metadata": {
                "description": "Provide a tier of your Azure Container Registry."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2021-06-01-preview",
              "name": "[parameters('acrName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('acrSku')]"
              },
              "properties": {
                "adminUserEnabled": true
              }
            }
          ],
          "outputs": {
            "createdAcrName": {
              "type": "string",
              "value": "[parameters('acrName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('nftservice-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('aks-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('nftservice-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1674044218608658175"
            }
          },
          "parameters": {
            "aksName": {
              "type": "string",
              "defaultValue": "[format('aksnftsa{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Provide a globally unique name of your Azure kubernetes Cluster"
              },
              "maxLength": 50,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Provide a location for aks."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2021-05-01",
              "name": "[parameters('aksName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "dnsPrefix": "[parameters('aksName')]",
                "enableRBAC": true,
                "kubernetesVersion": "1.20.9",
                "agentPoolProfiles": [
                  {
                    "name": "tokensvc",
                    "count": 3,
                    "vmSize": "Standard_A4_v2",
                    "mode": "System"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "createdAksName": {
              "type": "string",
              "value": "[parameters('aksName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('nftservice-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('UserIdentity-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('nftservice-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "14281089801132896856"
            }
          },
          "parameters": {
            "nftUserIdentityName": {
              "type": "string",
              "defaultValue": "[format('NFTUserIdentity-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Provide Managed Idenity user name."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for creating managed identity."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('nftUserIdentityName')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "createdNftUserIdentity": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('nftUserIdentityName'))]"
            },
            "createdNftUserIdentityId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('nftUserIdentityName'))).principalId]"
            },
            "createdNftUserIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('nftUserIdentityName'))).clientId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('nftservice-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('cosmos-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('nftservice-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "11174911382171173002"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string",
              "defaultValue": "[format('cosmosnftsa-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Cosmos DB account name, max length 44 characters, lowercase"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Cosmos DB account."
              }
            },
            "primaryRegion": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The primary replica region for the Cosmos DB account."
              }
            },
            "defaultConsistencyLevel": {
              "type": "string",
              "defaultValue": "Session",
              "allowedValues": [
                "Eventual",
                "ConsistentPrefix",
                "Session",
                "BoundedStaleness",
                "Strong"
              ],
              "metadata": {
                "description": "The default consistency level of the Cosmos DB account."
              }
            },
            "maxStalenessPrefix": {
              "type": "int",
              "defaultValue": 100000,
              "maxValue": 2147483647,
              "minValue": 10,
              "metadata": {
                "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
              }
            },
            "maxIntervalInSeconds": {
              "type": "int",
              "defaultValue": 300,
              "maxValue": 86400,
              "minValue": 5,
              "metadata": {
                "description": "Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
              }
            },
            "automaticFailover": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable automatic failover for regions"
              }
            }
          },
          "variables": {
            "accountName_var": "[toLower(parameters('accountName'))]",
            "consistencyPolicy": {
              "Eventual": {
                "defaultConsistencyLevel": "Eventual"
              },
              "ConsistentPrefix": {
                "defaultConsistencyLevel": "ConsistentPrefix"
              },
              "Session": {
                "defaultConsistencyLevel": "Session"
              },
              "BoundedStaleness": {
                "defaultConsistencyLevel": "BoundedStaleness",
                "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
                "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
              },
              "Strong": {
                "defaultConsistencyLevel": "Strong"
              }
            },
            "locations": [
              {
                "locationName": "[parameters('primaryRegion')]",
                "failoverPriority": 0,
                "isZoneRedundant": false
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2021-03-15",
              "name": "[variables('accountName_var')]",
              "kind": "GlobalDocumentDB",
              "location": "[parameters('location')]",
              "properties": {
                "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
                "locations": "[variables('locations')]",
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": "[parameters('automaticFailover')]"
              }
            }
          ],
          "outputs": {
            "createdCosmosDBName": {
              "type": "string",
              "value": "[variables('accountName_var')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('nftservice-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('akv-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('nftservice-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "332441451325897206"
            }
          },
          "parameters": {
            "akvName": {
              "type": "string",
              "defaultValue": "[format('akvnftsa{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Provide a globally unique name of your Azure Keyvault"
              },
              "maxLength": 50,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Provide a location for Key Vault."
              }
            },
            "param_tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-06-01-preview",
              "name": "[parameters('akvName')]",
              "location": "[parameters('location')]",
              "properties": {
                "accessPolicies": [],
                "createMode": "default",
                "enableSoftDelete": true,
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[parameters('param_tenantId')]"
              }
            }
          ],
          "outputs": {
            "createdAkvUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('akvName'))).vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('nftservice-{0}', variables('resourceprefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pid-{0}', variables('resourceprefix'))]",
      "resourceGroup": "[format('nftservice-{0}', variables('resourceprefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "2239049205019932014"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "pid-ea77555d-5efd-5b4b-ba1f-1d54583008ea",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              },
              "metadata": {
                "description": "create resource with NFT Trace ID"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('nftservice-{0}', variables('resourceprefix')))]"
      ]
    }
  ],
  "outputs": {
    "pipDomainName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('blockchain-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('pip-{0}', variables('resourceprefix'))), '2020-10-01').outputs.createdFqdnUri.value]"
    },
    "blockchainRgName": {
      "type": "string",
      "value": "[format('blockchain-{0}', variables('resourceprefix'))]"
    },
    "vmName": {
      "type": "string",
      "value": "[variables('virtualMachineName')]"
    },
    "aksName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('nftservice-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('aks-{0}', variables('resourceprefix'))), '2020-10-01').outputs.createdAksName.value]"
    },
    "acrName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('nftservice-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('acr-{0}', variables('resourceprefix'))), '2020-10-01').outputs.createdAcrName.value]"
    },
    "cosmosName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('nftservice-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('cosmos-{0}', variables('resourceprefix'))), '2020-10-01').outputs.createdCosmosDBName.value]"
    },
    "akvUrl": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('nftservice-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('akv-{0}', variables('resourceprefix'))), '2020-10-01').outputs.createdAkvUri.value]"
    },
    "nftRgName": {
      "type": "string",
      "value": "[format('nftservice-{0}', variables('resourceprefix'))]"
    },
    "nftUserIdentityClientId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('nftservice-{0}', variables('resourceprefix'))), 'Microsoft.Resources/deployments', format('UserIdentity-{0}', variables('resourceprefix'))), '2020-10-01').outputs.createdNftUserIdentityClientId.value]"
    }
  }
}